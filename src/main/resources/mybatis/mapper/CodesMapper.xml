<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bigtreetc.mybatis.sample.domain.mapper.CodesMapper">
  <resultMap id="BaseResultMap" type="com.bigtreetc.mybatis.sample.domain.model.Codes">
    <id column="code_id" jdbcType="BIGINT" property="codeId" />
    <result column="category_code" jdbcType="VARCHAR" property="categoryCode" />
    <result column="code_value" jdbcType="VARCHAR" property="codeValue" />
    <result column="code_name" jdbcType="VARCHAR" property="codeName" />
    <result column="code_alias" jdbcType="VARCHAR" property="codeAlias" />
    <result column="display_order" jdbcType="INTEGER" property="displayOrder" />
    <result column="is_invalid" jdbcType="BIT" property="isInvalid" />
    <result column="created_by" jdbcType="VARCHAR" property="createdBy" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_by" jdbcType="VARCHAR" property="updatedBy" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="version" jdbcType="BIGINT" property="version" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    code_id, category_code, code_value, code_name, code_alias, display_order, is_invalid, 
    created_by, created_at, updated_by, updated_at, version
  </sql>
  <select id="selectByExample" parameterType="com.bigtreetc.mybatis.sample.domain.model.CodesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from codes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from codes
    where code_id = #{codeId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from codes
    where code_id = #{codeId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.bigtreetc.mybatis.sample.domain.model.CodesExample">
    delete from codes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.bigtreetc.mybatis.sample.domain.model.Codes">
    insert into codes (code_id, category_code, code_value, 
      code_name, code_alias, display_order, 
      is_invalid, created_by, created_at, 
      updated_by, updated_at, version
      )
    values (#{codeId,jdbcType=BIGINT}, #{categoryCode,jdbcType=VARCHAR}, #{codeValue,jdbcType=VARCHAR}, 
      #{codeName,jdbcType=VARCHAR}, #{codeAlias,jdbcType=VARCHAR}, #{displayOrder,jdbcType=INTEGER}, 
      #{isInvalid,jdbcType=BIT}, #{createdBy,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedBy,jdbcType=VARCHAR}, #{updatedAt,jdbcType=TIMESTAMP}, #{version,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.bigtreetc.mybatis.sample.domain.model.Codes">
    insert into codes
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="codeId != null">
        code_id,
      </if>
      <if test="categoryCode != null">
        category_code,
      </if>
      <if test="codeValue != null">
        code_value,
      </if>
      <if test="codeName != null">
        code_name,
      </if>
      <if test="codeAlias != null">
        code_alias,
      </if>
      <if test="displayOrder != null">
        display_order,
      </if>
      <if test="isInvalid != null">
        is_invalid,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="version != null">
        version,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="codeId != null">
        #{codeId,jdbcType=BIGINT},
      </if>
      <if test="categoryCode != null">
        #{categoryCode,jdbcType=VARCHAR},
      </if>
      <if test="codeValue != null">
        #{codeValue,jdbcType=VARCHAR},
      </if>
      <if test="codeName != null">
        #{codeName,jdbcType=VARCHAR},
      </if>
      <if test="codeAlias != null">
        #{codeAlias,jdbcType=VARCHAR},
      </if>
      <if test="displayOrder != null">
        #{displayOrder,jdbcType=INTEGER},
      </if>
      <if test="isInvalid != null">
        #{isInvalid,jdbcType=BIT},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        #{version,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.bigtreetc.mybatis.sample.domain.model.CodesExample" resultType="java.lang.Long">
    select count(*) from codes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update codes
    <set>
      <if test="record.codeId != null">
        code_id = #{record.codeId,jdbcType=BIGINT},
      </if>
      <if test="record.categoryCode != null">
        category_code = #{record.categoryCode,jdbcType=VARCHAR},
      </if>
      <if test="record.codeValue != null">
        code_value = #{record.codeValue,jdbcType=VARCHAR},
      </if>
      <if test="record.codeName != null">
        code_name = #{record.codeName,jdbcType=VARCHAR},
      </if>
      <if test="record.codeAlias != null">
        code_alias = #{record.codeAlias,jdbcType=VARCHAR},
      </if>
      <if test="record.displayOrder != null">
        display_order = #{record.displayOrder,jdbcType=INTEGER},
      </if>
      <if test="record.isInvalid != null">
        is_invalid = #{record.isInvalid,jdbcType=BIT},
      </if>
      <if test="record.createdBy != null">
        created_by = #{record.createdBy,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedBy != null">
        updated_by = #{record.updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.version != null">
        version = #{record.version,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update codes
    set code_id = #{record.codeId,jdbcType=BIGINT},
      category_code = #{record.categoryCode,jdbcType=VARCHAR},
      code_value = #{record.codeValue,jdbcType=VARCHAR},
      code_name = #{record.codeName,jdbcType=VARCHAR},
      code_alias = #{record.codeAlias,jdbcType=VARCHAR},
      display_order = #{record.displayOrder,jdbcType=INTEGER},
      is_invalid = #{record.isInvalid,jdbcType=BIT},
      created_by = #{record.createdBy,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_by = #{record.updatedBy,jdbcType=VARCHAR},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      version = #{record.version,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bigtreetc.mybatis.sample.domain.model.Codes">
    update codes
    <set>
      <if test="categoryCode != null">
        category_code = #{categoryCode,jdbcType=VARCHAR},
      </if>
      <if test="codeValue != null">
        code_value = #{codeValue,jdbcType=VARCHAR},
      </if>
      <if test="codeName != null">
        code_name = #{codeName,jdbcType=VARCHAR},
      </if>
      <if test="codeAlias != null">
        code_alias = #{codeAlias,jdbcType=VARCHAR},
      </if>
      <if test="displayOrder != null">
        display_order = #{displayOrder,jdbcType=INTEGER},
      </if>
      <if test="isInvalid != null">
        is_invalid = #{isInvalid,jdbcType=BIT},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=BIGINT},
      </if>
    </set>
    where code_id = #{codeId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bigtreetc.mybatis.sample.domain.model.Codes">
    update codes
    set category_code = #{categoryCode,jdbcType=VARCHAR},
      code_value = #{codeValue,jdbcType=VARCHAR},
      code_name = #{codeName,jdbcType=VARCHAR},
      code_alias = #{codeAlias,jdbcType=VARCHAR},
      display_order = #{displayOrder,jdbcType=INTEGER},
      is_invalid = #{isInvalid,jdbcType=BIT},
      created_by = #{createdBy,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_by = #{updatedBy,jdbcType=VARCHAR},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=BIGINT}
    where code_id = #{codeId,jdbcType=BIGINT}
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="com.bigtreetc.mybatis.sample.domain.model.CodesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from codes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <insert id="upsertSelective" parameterType="com.bigtreetc.mybatis.sample.domain.model.Codes">
    insert into codes
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="codeId != null">
        code_id,
      </if>
      <if test="categoryCode != null">
        category_code,
      </if>
      <if test="codeValue != null">
        code_value,
      </if>
      <if test="codeName != null">
        code_name,
      </if>
      <if test="codeAlias != null">
        code_alias,
      </if>
      <if test="displayOrder != null">
        display_order,
      </if>
      <if test="isInvalid != null">
        is_invalid,
      </if>
      <if test="createdBy != null">
        created_by,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedBy != null">
        updated_by,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="version != null">
        version,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="codeId != null">
        #{codeId,jdbcType=BIGINT},
      </if>
      <if test="categoryCode != null">
        #{categoryCode,jdbcType=VARCHAR},
      </if>
      <if test="codeValue != null">
        #{codeValue,jdbcType=VARCHAR},
      </if>
      <if test="codeName != null">
        #{codeName,jdbcType=VARCHAR},
      </if>
      <if test="codeAlias != null">
        #{codeAlias,jdbcType=VARCHAR},
      </if>
      <if test="displayOrder != null">
        #{displayOrder,jdbcType=INTEGER},
      </if>
      <if test="isInvalid != null">
        #{isInvalid,jdbcType=BIT},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        #{version,jdbcType=BIGINT},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="codeId != null">
        code_id = #{codeId,jdbcType=BIGINT},
      </if>
      <if test="categoryCode != null">
        category_code = #{categoryCode,jdbcType=VARCHAR},
      </if>
      <if test="codeValue != null">
        code_value = #{codeValue,jdbcType=VARCHAR},
      </if>
      <if test="codeName != null">
        code_name = #{codeName,jdbcType=VARCHAR},
      </if>
      <if test="codeAlias != null">
        code_alias = #{codeAlias,jdbcType=VARCHAR},
      </if>
      <if test="displayOrder != null">
        display_order = #{displayOrder,jdbcType=INTEGER},
      </if>
      <if test="isInvalid != null">
        is_invalid = #{isInvalid,jdbcType=BIT},
      </if>
      <if test="createdBy != null">
        created_by = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        updated_by = #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <insert id="upsert" parameterType="com.bigtreetc.mybatis.sample.domain.model.Codes">
    insert into codes
    (code_id, category_code, code_value, code_name, code_alias, display_order, is_invalid, 
      created_by, created_at, updated_by, updated_at, version)
    values
    (#{codeId,jdbcType=BIGINT}, #{categoryCode,jdbcType=VARCHAR}, #{codeValue,jdbcType=VARCHAR}, 
      #{codeName,jdbcType=VARCHAR}, #{codeAlias,jdbcType=VARCHAR}, #{displayOrder,jdbcType=INTEGER}, 
      #{isInvalid,jdbcType=BIT}, #{createdBy,jdbcType=VARCHAR}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedBy,jdbcType=VARCHAR}, #{updatedAt,jdbcType=TIMESTAMP}, #{version,jdbcType=BIGINT}
      )
    on duplicate key update 
    code_id = #{codeId,jdbcType=BIGINT}, 
    category_code = #{categoryCode,jdbcType=VARCHAR}, 
    code_value = #{codeValue,jdbcType=VARCHAR}, 
    code_name = #{codeName,jdbcType=VARCHAR}, 
    code_alias = #{codeAlias,jdbcType=VARCHAR}, 
    display_order = #{displayOrder,jdbcType=INTEGER}, 
    is_invalid = #{isInvalid,jdbcType=BIT}, 
    created_by = #{createdBy,jdbcType=VARCHAR}, 
    created_at = #{createdAt,jdbcType=TIMESTAMP}, 
    updated_by = #{updatedBy,jdbcType=VARCHAR}, 
    updated_at = #{updatedAt,jdbcType=TIMESTAMP}, 
    version = #{version,jdbcType=BIGINT}
  </insert>
</mapper>